package zp.designpattern.create.abstract_factory;

/**
 * Created by change on 2018/11/19.
 * <p>
 * 1、介绍
 * 意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
 * <p>
 * 主要解决：主要解决接口选择的问题。
 * <p>
 * 何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。
 * <p>
 * 如何解决：在一个产品族里面，定义多个产品。每个具体的工厂负责一个产品族。抽象工厂的返回值为最高级抽象产品。
 * <p>
 * 关键代码：在一个工厂里聚合多个同类产品（在同一个产品族中）。
 * <p>
 * 应用实例：举一个衣服与衣柜的例子。家里边，有男装（产品族，其中包含休闲男装和商务男装）
 * 、女装（产品族，其中包含休闲女装和商务女装）。商务女装、商务男装、时尚女装、时尚男装，这些都是具体产品。
 * 男装专门放在男衣柜（具体工厂）中，女装专门放在女衣柜（具体工厂）中。当我们需要拿衣服时候，从衣柜（抽象工厂）中获取。
 * <p>
 * 所以抽象工厂，非常适合解决两个维度的组合产品的构造问题，取其中一个维度作为产品族，另外一个维度作为产品族中具体的多个产品。
 * <p>
 * 优点：能够从多个产品族的多个产品中，简洁的获取想要的具体产品。
 * 解决了工厂模式中的不符合开闭原则的问题（增加新的产品时候，不修改工厂，而是增加工厂）。
 * <p>
 * 缺点：产品族扩展比较困难，要增加一个系列的某一产品，
 * 要增加具体的产品类，还要增加对应的工厂类（或者修改对应产品族的工厂类）。
 * <p>
 * 注意事项：产品族难扩展，产品等级易扩展。
 */

/**
 * 抽象工厂接口，包含两个抽象方法，卖包子和卖豆浆
 */
public interface BreakfastFactory {
    Breakfast sellBuns();

    Breakfast sellSoyMilk();
}
