package zp.designpattern.structure.adapter;

/**
 * Created by change on 2018/11/20.
 *https://www.cnblogs.com/songyaqi/p/4805820.html
 * 当前这种是对象适配器 (比较常用)
 * 还有一种类适配器
 * 定义
 *  将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作
 *
 *  　　1：Target(目标抽象类)：目标抽象类定义客户所需的接口，可以是一个抽象类或接口，
 *  也可以是具体类。在类适配器中，由于C#语言不支持多重继承，所以它只能是接口。

 　　2：Adapter(适配器类)：它可以调用另一个接口，
 作为一个转换器，对Adaptee和Target进行适配。它是适配器模式的核心。

 　　3：Adaptee(适配者类)：适配者即被适配的角色，
 它定义了一个已经存在的接口，这个接口需要适配，适配者类包好了客户希望的业务方法。
 *
 *
 *五：适配器模式的优缺点

 　　优点：

 　　　　1：将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无需修改原有结构。

 　　　　2：增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一适配者类可以在多个不同的系统中复用。

 　　　　3：灵活性和扩展性都非常好，通过使用配置文件，可以很方便的更换适配器，也可以在不修改原有代码的基础上 增加新的适配器，完全复合开闭原则。

 　　缺点：

 　　　　1：一次最多只能适配一个适配者类，不能同时适配多个适配者。

 　　　　2：适配者类不能为最终类，在C#中不能为sealed类

 　　　　3：目标抽象类只能为接口，不能为类，其使用有一定的局限性。

 六：适配器模式的适用环境

 　　系统需要使用一些现有的类，而这些类的接口不符合系统的需要，甚至没有这些类的源代码

 　　创建一个可以重复使用的类，用于和一些彼此之间没有太大关联的类，包括一些可能在将来引进的类一起工作
 *
 *
 * 总结 定义 ：兼容
 *    优点： 目标和适配者解耦  不用改结构   复用性   灵活  扩展  方便新增适配器 符合复合开闭原则
 *     缺点 ： 一次适配一个是适配者
 *
 *
 *
 */

public class AdapterTest {
    public static void main(String[] strings) {
        Captain captain = new Captain(new FishingBoatAdapter());
        captain.row();



    }
}
